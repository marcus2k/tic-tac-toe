[{"/Users/marcus/Desktop/workspace/tictactoe/src/App.js":"1","/Users/marcus/Desktop/workspace/tictactoe/src/reportWebVitals.js":"2","/Users/marcus/Desktop/workspace/tictactoe/src/Cell.js":"3","/Users/marcus/Desktop/workspace/tictactoe/src/index.js":"4","/Users/marcus/Desktop/workspace/tictactoe/src/TTTGrid.js":"5"},{"size":3680,"mtime":1607282199019,"results":"6","hashOfConfig":"7"},{"size":362,"mtime":1607245673053,"results":"8","hashOfConfig":"7"},{"size":712,"mtime":1607281633494,"results":"9","hashOfConfig":"7"},{"size":508,"mtime":1607282195377,"results":"10","hashOfConfig":"7"},{"size":1849,"mtime":1607281704057,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14"},"13epihy",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/marcus/Desktop/workspace/tictactoe/src/App.js",["24"],"import { useState, useEffect } from 'react';\nimport Grid from './TTTGrid.js';\nimport './App.css';\n\nconst lines = [ // list of winning coordinate sets\n  [[0, 0], [0, 1], [0, 2]], // first row\n  [[1, 0], [1, 1], [1, 2]], // second row\n  [[2, 0], [2, 1], [2, 2]], // third row\n  [[0, 0], [1, 0], [2, 0]], // first column\n  [[0, 1], [1, 1], [2, 1]], // second column\n  [[0, 2], [1, 2], [2, 2]], // third column\n  [[0, 0], [1, 1], [2, 2]], // diagonal from top-left\n  [[0, 2], [1, 1], [2, 0]], // diagonal from top-right\n];\n\n// eslint-disable-next-line\nconst allEqual = (x, y, z) => x == y && y == z && x == z;\n\nconst getWinner = (grid) => {\n  console.log(grid);\n  for (let i = 0; i < 8; i++) {\n    const [[x1, y1], [x2, y2], [x3, y3]] = lines[i];\n    if (grid[x1][y1] == null || grid[x2][y2] == null || grid[x3][y3] == null) {\n      continue;\n    }\n    if (allEqual(grid[x1][y1], grid[x2][y2], grid[x3][y3])) {\n      console.log(`Winner is ${grid[x1][y1]}`);\n      return grid[x1][y1];\n    }\n  }\n  return null;\n};\n\nconst isFull = grid => {\n  for (let r = 0; r < 3; r++) {\n    for (let c = 0; c < 3; c++) {\n      if (grid[r][c] == null) {\n        return false;\n      }\n    }\n  }\n  console.log(\"full\");\n  return true;\n};\n\nconst drawMessage = \"It's a draw! Resetting the game...\";\n\nconst getWinMessage = player => `The winner is player ${player ? 'X' : 'O'}! Resetting the game...`;\n\nconst initialState = {\n  gridModel: [[null, null, null], [null, null, null], [null, null, null]],\n  currPlayer: 1, // 1 or 0\n  winner: null, // 1, 0, or null\n  full: false, // true, false\n};\n\nconst getInitialState = () => {\n  return {\n    ...initialState,\n    gridModel: [\n      [...initialState.gridModel[0]],\n      [...initialState.gridModel[1]], \n      [...initialState.gridModel[2]]\n    ],\n  };\n};\n\nconst App = () => {\n  const [state, setState] = useState(() => getInitialState());\n\n  const { gridModel, currPlayer, winner, full } = state;\n\n  const reset = () => {\n    alert(message);\n    setState(() => getInitialState());\n  };\n  /*\n  const winner = getWinner(gridModel);\n  const full = isFull(gridModel);\n  const message = winner != null ? getWinMessage(winner) : drawMessage;\n  const isFinished = winner != null || full;\n  if (isFinished) {\n    reset();\n  }*/\n  \n\n  /*\n  if (isFinished) {\n    setTimeout(alert(message), 2000);\n    //setTimeout(reset(), 1000);\n  }\n  */\n\n  const updateState = classes => {\n    // eslint-disable-next-line\n    let [ row, col, others ] = classes.split(\" \", 3);\n    row = row[4]; // row-?\n    col = col[4]; // col-?\n    const gridModelCopy = [\n      [...gridModel[0]], \n      [...gridModel[1]], \n      [...gridModel[2]]\n    ];\n    gridModelCopy[row][col] = currPlayer;\n\n    setState(() => {return {\n      gridModel: gridModelCopy,\n      currPlayer: 1 - currPlayer,\n      winner: getWinner(gridModelCopy),\n      full: isFull(gridModelCopy),\n      buffer: true,\n    }});\n  };\n\n  //let handler = !buffer || !isFinished ? x => updateState(x) : reset;\n  //let handler = x => !buffer || !isFinished ? updateState(x) : reset(); \n  let handler = x => updateState(x);\n\n  const isFinished = (winner != null) || full;\n  const message = winner != null ? getWinMessage(winner) : drawMessage;\n\n\n  if (isFinished) {\n    return (\n      <div className=\"App\">\n        <script defer>{reset()}</script>\n        <Grid gridModel={gridModel} notifyApp={handler} finishMessage={message} />\n      </div>\n    );\n  }\n\n  //        <script>{setTimeout(reset(), 3000)}</script>\n  /*\n  useEffect(() => {\n    if (isFinished) {\n      alert(message);\n    };\n  });*/\n\n  return (\n    <div className=\"App\">\n      <Grid gridModel={gridModel} notifyApp={handler} />\n    </div>\n  );\n};\n\nexport default App;\n","/Users/marcus/Desktop/workspace/tictactoe/src/reportWebVitals.js",[],"/Users/marcus/Desktop/workspace/tictactoe/src/Cell.js",["25"],"import './Cell.css';\nimport x from './x.png';\nimport o from './o.png';\n\nconst Cell = (props) => {\n    const { classes, content, notifyGrid } = props;\n    const handler = () => notifyGrid(classes);\n\n    /* // debugging statements\n    console.log(content);\n    console.log(props.hasOwnProperty(\"content\") ? \"Cell is filled\" : \"Cell is empty\");\n    console.log(\"Cell component loaded\");\n    */\n\n    if (props.content != null) {\n        const symbol = <img src={content == 0 ? o : x} alt=\"cross\"></img>;\n        return(\n            <td className={classes}>\n                {symbol}\n            </td>\n        );\n    }\n\n    return(\n        <td className={classes} onClick={handler}></td>\n    );\n}\n\nexport default Cell;","/Users/marcus/Desktop/workspace/tictactoe/src/index.js",[],"/Users/marcus/Desktop/workspace/tictactoe/src/TTTGrid.js",[],{"ruleId":"26","severity":1,"message":"27","line":1,"column":20,"nodeType":"28","messageId":"29","endLine":1,"endColumn":29},{"ruleId":"30","severity":1,"message":"31","line":16,"column":42,"nodeType":"32","messageId":"33","endLine":16,"endColumn":44},"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected"]